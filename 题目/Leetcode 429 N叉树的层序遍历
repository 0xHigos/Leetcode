### 题目定义：

````java
给定一个 N 叉树，返回其节点值的层序遍历。（即从左到右，逐层遍历）。
树的序列化输入是用层序遍历，每组子节点都由 null 值分隔（参见示例）。
````

![img](https://assets.leetcode.com/uploads/2018/10/12/narytreeexample.png)

````java
输入：root = [1,null,3,2,4,null,5,6]
输出：[[1],[3,2,4],[5,6]]
````

![img](https://assets.leetcode.com/uploads/2019/11/08/sample_4_964.png)

````java
输入：root = [1,null,2,3,4,5,null,null,6,7,null,8,null,9,10,null,null,11,null,12,null,13,null,null,14]
输出：[[1],[2,3,4,5],[6,7,8,9,10],[11,12,13],[14]]
````



### 方式一(层序遍历)：

````java

class Solution {
    public List<List<Integer>> levelOrder(Node root) {
        List<List<Integer>> ans = new ArrayList<>();
        if(root == null)
            return ans;
        Queue<Node> queue = new ArrayDeque<>();
        queue.offer(root);
        while(!queue.isEmpty()){
            int size = queue.size();
            List<Integer> level = new ArrayList<>();
            for(int i = 0; i < size; i++){
                Node node = queue.poll();
                level.add(node.val);
                for(Node child : node.children){
                    queue.offer(child);
                }
            }
            ans.add(level);
        }
        return ans;
    }
}
````



### 方式二(dfs + 给定层次)：

````java
class Solution {
    private List<List<Integer>> ans = new ArrayList<>();
    public List<List<Integer>> levelOrder(Node root) {
        if(root != null)
            dfs(root,0);
        return ans;
    }
    private void dfs(Node root,int level){
        if(root == null)
            return;
        if(ans.size() <= level){
            ans.add(new ArrayList<Integer>());
        }
        ans.get(level).add(root.val);
        for(Node child : root.children){
            dfs(child,level + 1);
        }
    }
}
````



